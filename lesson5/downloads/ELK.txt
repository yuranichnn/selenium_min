Manage 100% readout and alert
Add time slider in video ease.



elasticsearch-service-tokens create elastic/kibana default
SERVICE_TOKEN elastic/kibana/default = AAEAAWVsYXN0aWMva2liYW5hL2RlZmF1bHQ6MUhsTUMyWDZSd09WUUdzZVFGNEU3UQ


You need to start 3 cmd terminals

C:\elasticsearch-8.15.2\bin
bin\elasticsearch.bat
https://192.168.1.77:9200
http://192.168.1.77:9200

C:\kibana-8.15.2\bin
kibana.bat
http://localhost:5601/

C:\logstash-8.15.2\bin
old: logstash.bat -f C:\logstash-8.15.2\config\logstash.conf
logstash -f "C:\logstash-8.15.2\config\logstash-flask.conf"

-------------
Here's a step-by-step plan to set up a basic ELK stack focusing on logging from your Flask application (app.py) with simple filtering capabilities:
• Step 1: Set up Elasticsearch
Install Elasticsearch
Start the Elasticsearch service
Verify it's running by accessing the HTTP API
• Step 2: Set up Kibana
Install Kibana
Configure Kibana to connect to Elasticsearch
Start the Kibana service
Verify it's accessible via web browser
• Step 3: Set up Logstash
Install Logstash
Create a simple Logstash configuration file to read logs from a file
• Step 4: Modify Flask app logging
Update app.py to log to a file instead of console
Ensure log messages include timestamp and log level
• Step 5: Configure Logstash to parse Flask logs
Create a Logstash filter to parse Flask log format
Test the configuration with sample log data
• Step 6: Start Logstash
Run Logstash with the new configuration
Verify logs are being ingested into Elasticsearch
• Step 7: Create Kibana index pattern
Access Kibana web interface
Create an index pattern for the Flask logs
• Step 8: Explore logs in Kibana
Use Kibana's Discover tab to view ingested logs
Try simple filters based on log level or message content
• Step 9: Create a simple dashboard
Create visualizations for common queries (e.g., log levels over time)
Combine visualizations into a dashboard
• Step 10: Test end-to-end
Generate logs by using your Flask application
Verify logs appear in Kibana with minimal delay
Test filters and dashboard updates
This plan focuses on getting a basic ELK stack up and running with your Flask logs, allowing for simple filtering and visualization. Each step is relatively small and provides visual feedback, allowing you to ensure everything is working correctly before moving to the next step.